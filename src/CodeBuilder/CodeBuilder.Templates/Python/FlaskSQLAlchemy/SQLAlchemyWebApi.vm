## 实体类生成模板
##
## 可选参数:
## - ${className}
## - ${fields}
# coding:utf8
# !/usr/bin/python
""" 
${className}API File
"""
from app_logging import logger
from flask import Response, json, request
from flask_restful import Resource, reqparse
from ${serviceModuleName} import ${serviceClass} as service


requestParser = reqparse.RequestParser()
#foreach($field in $fields)
#if( ${field.Type} == "String" )
requestParser.add_argument('${field.Name}', type=unicode)
#else
requestParser.add_argument('${field.Name}')
#end
#end

class ${className}API(Resource):
    
    def __init__(self):
        self.res = Response(status=200)
        self.res.content_type = 'application/json; charset=utf-8'
        self.service = service()

    def get(self,id):
        """ 查询对象 """
        
        code, message, data = self.service.findOne(id)
        self.res.data = json.dumps({'code':code, 'message':message, 'data':data}, ensure_ascii=False)

        return self.res

    def post(self):
        """ 保存对象 """
        args = requestParser.parse_args()

        code, message = self.service.save(args)
        self.res.data = json.dumps({'code':code, 'message':message}, ensure_ascii=False)

        return self.res

    def put(self, id):
        """ 更新对象 """
        args = requestParser.parse_args()

        code, message = self.service.save(args)
        self.res.data = json.dumps({'code':code, 'message':message}, ensure_ascii=False)

        return self.res

    def delete(self, id):
        """ 删除对象 """

        code, message = self.service.delete(id=id)
        self.res.data = json.dumps({'code':code, 'message':message}, ensure_ascii=False)

        return self.res


class ${className}QueryAPI(Resource):
    
    def __init__(self):
        self.res = Response(status=200)
        self.res.content_type = 'application/json; charset=utf-8'
        self.service = service()

    def post(self):
        """ 查询 """
        parser = reqparse.RequestParser()
        parser.add_argument('scene')

        args = requestParser.parse_args()

        if args.scene == 'query'：
            # getPaging 查询列表记录
            parser = reqparse.RequestParser()
            parser.add_argument('name')
        
            code, message, data = self.service.findAll(args)
            self.res.data = json.dumps({'code':code, 'message':message, 'data':data}, ensure_ascii=False)

        elif args.scene == 'findAll'：
            # findAll 查询列表记录
            parser = reqparse.RequestParser()
            parser.add_argument('name')
        
            code, message, data = self.service.findAll(args)
            self.res.data = json.dumps({'code':code, 'message':message, 'data':data}, ensure_ascii=False)

        return self.res